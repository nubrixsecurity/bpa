<#
  .SYNOPSIS
  Performs Office 365 security assessment.

  .DESCRIPTION
  Automate the security assessment of Microsoft Office 365 environments.

  .PARAMETER UserPrincipalName
  The UPN of the user executing 365Inspect. This value is automatically passed to supported connection strings for PowerShell modules.

  .PARAMETER OutPath
  The path to a folder where the report generated by 365Inspect will be placed.

  .PARAMETER Auth
  Switch that should be one of the literal values "MFA", "CMDLINE", or "ALREADY_AUTHED".

  .PARAMETER reportType
  Optional parameter allowing a specific report output format. Currently supported formats are HTML, JSON, CSV, and XML. Default value is 'All' and generates all formats.

  .INPUTS
  None. You cannot pipe objects to 365Inspect.ps1.

  .OUTPUTS
  None. 365Inspect.ps1 does not generate any output.

  .EXAMPLE
  PS> .\365Inspect.ps1 -OutPath $reports\Company -UserPrincipalName user@company.onmicrosoft.com -Auth MFA
#>

param (
    [Parameter(Mandatory = $true,
        HelpMessage = 'Output path for report')]
    [string] $OutPath,
    [Parameter(Mandatory = $true,
        HelpMessage = 'UserPrincipalName required for Exchange Connection')]
    [string] $UserPrincipalName,
    [Parameter(Mandatory = $false,
        HelpMessage = 'Skips required module check. Designed for troubleshooting purposes.')]
    [switch] $SkipModuleCheck,
    [Parameter(Mandatory = $false,
        HelpMessage = "Report Output Format")]
    [ValidateSet("All", "HTML", "CSV", "XML", "JSON",
        IgnoreCase = $true)]
    [string] $reportType = "All",
    [Parameter(Mandatory = $true,
        HelpMessage = 'Auth type')]
    [ValidateSet('ALREADY_AUTHED', 'MFA',
        IgnoreCase = $false)]
    [string] $Auth = "MFA",
    [string[]] $SelectedInspectors = @(),
    [string[]] $ExcludedInspectors = @()
)

$global:orgInfo = $null
$out_path = $OutPath
$selected_inspectors = $SelectedInspectors
$excluded_inspectors = $ExcludedInspectors

. .\Write-ErrorLog.ps1

$MaximumFunctionCount = 32768

#Function to change color of text on errors for specific messages
Function Colorize($ForeGroundColor) {
    $color = $Host.UI.RawUI.ForegroundColor
    $Host.UI.RawUI.ForegroundColor = $ForeGroundColor
  
    if ($args) {
        Write-Output $args
    }
  
    $Host.UI.RawUI.ForegroundColor = $color
}

Function Confirm-Close {
    Read-Host "Press Enter to Exit"
    Exit
}

# Obtain tenant info
$org_name = ($global:tenantDomain -split '.onmicrosoft.com')[0]
$tenantDisplayName = ($global:orgInfo).DisplayName

# Get a list of every available detection module by parsing the PowerShell
# scripts present in the .\inspectors folder. 
#Exclude specified Inspectors
If ($excluded_inspectors -and $excluded_inspectors.Count) {
    $excluded_inspectors = foreach ($inspector in $excluded_inspectors) { "$inspector.ps1" }
    $inspectors = (Get-ChildItem .\inspectors\*.ps1 -exclude $excluded_inspectors).Name | ForEach-Object { ($_ -split ".ps1")[0] }
}
else {
    $inspectors = (Get-ChildItem .\inspectors\*.ps1).Name | ForEach-Object { ($_ -split ".ps1")[0] }
}

#Use Selected Inspectors
If ($selected_inspectors -AND $selected_inspectors.Count) {
    "The following inspectors were selected for use: "
    Foreach ($inspector in $selected_inspectors) {
        Write-Output $inspector
    }
}
elseif ($excluded_Inspectors -and $excluded_inspectors.Count) {
    $selected_inspectors = $inspectors
    Write-Output "Using inspectors:`n"
    Foreach ($inspector in $inspectors) {
        Write-Output $inspector
    }
}
Else {
    "Using all inspectors."
    $selected_inspectors = $inspectors
}

#Create Output Directory if required
Try {
    New-Item -ItemType Directory -Force -Path $out_path | Out-Null
    If ((Test-Path $out_path) -eq $true) {
        $path = Resolve-Path $out_path
        Write-Output "$($path.Path) created successfully."
    }
}
Catch {
    Write-Error "Directory not created. Please check permissions."
    Confirm-Close
}

# Maintain a list of all findings, beginning with an empty list.
$findings = @()

# For every inspector the user wanted to run...
ForEach ($selected_inspector in $selected_inspectors) {
    # ...if the user selected a valid inspector...
    If ($inspectors.Contains($selected_inspector)) {
        Write-Output "Invoking Inspector: $selected_inspector"
		
        # Get the static data (finding description, remediation etc.) associated with that inspector module.
        $finding = Get-Content .\inspectors\$selected_inspector.json | Out-String | ConvertFrom-Json
		
        # Invoke the actual inspector module and store the resulting list of insecure objects.
        $finding.AffectedObjects = Invoke-Expression ".\inspectors\$selected_inspector.ps1"
		
        # Add the finding to the list of all findings.
        $findings += $finding
    }
}

# Function that retrieves templating information from 
Function HTML-Report {
    # Function that retrieves templating information from 
    function Parse-Template {
        $template = (Get-Content ".\365InspectDefaultTemplate.html") -join "`n"
        $template -match '\<!--BEGIN_FINDING_LONG_REPEATER-->([\s\S]*)\<!--END_FINDING_LONG_REPEATER-->'
        $findings_long_template = $matches[1]
        
        $template -match '\<!--BEGIN_FINDING_SHORT_REPEATER-->([\s\S]*)\<!--END_FINDING_SHORT_REPEATER-->'
        $findings_short_template = $matches[1]
        
        $template -match '\<!--BEGIN_AFFECTED_OBJECTS_REPEATER-->([\s\S]*)\<!--END_AFFECTED_OBJECTS_REPEATER-->'
        $affected_objects_template = $matches[1]
        
        $template -match '\<!--BEGIN_REFERENCES_REPEATER-->([\s\S]*)\<!--END_REFERENCES_REPEATER-->'
        $references_template = $matches[1]
        
        $template -match '\<!--BEGIN_EXECSUM_TEMPLATE-->([\s\S]*)\<!--END_EXECSUM_TEMPLATE-->'
        $execsum_template = $matches[1]

        $template -match '\<!--BEGIN_CHART_TEMPLATE-->([\s\S]*)\<!--END_CHART_TEMPLATE-->'
        $chart_template = $matches[1]

        $template -match '\<!--BEGIN_APPENDIX-->([\s\S]*)\<!--END_APPENDIX-->'
        $appendix_template = $matches[1]
        
        return @{
            FindingShortTemplate    = $findings_short_template;
            FindingLongTemplate     = $findings_long_template;
            AffectedObjectsTemplate = $affected_objects_template;
            ReportTemplate          = $template;
            ReferencesTemplate      = $references_template;
            ExecsumTemplate         = $execsum_template;
            ChartTemplate           = $chart_template;
            AppendixTemplate        = $appendix_template
        }
    }
    
    $templates = Parse-Template
    
    # Maintain a running list of each finding, represented as HTML
    $short_findings_html = "" 
    $long_findings_html = ""
    $selected_inspectors_html = ""
    
    $findings_count = 0
    
    #$sortedFindings1 = $findings | Sort-Object {$_.FindingName}
    $sortedFindings = $findings | Sort-Object { Switch -Regex ($_.Impact) { 'Critical' { 1 }	'High' { 2 }	'Medium' { 3 }	'Low' { 4 }	'Informational' { 5 } }; $_.FindingName } 

    $criticalCount = 0
    $highCount = 0
    $mediumCount = 0
    $lowCount = 0
    $informationalCount = 0
    $exchangeCount = 0
    $sharepointCount = 0
    $teamsCount = 0
    $intuneCount = 0
    $aadCount = 0
    $securitycomplianceCount = 0
    $tenantCount = 0

    ForEach ($finding in $sortedFindings) {
        # If the result from the inspector was not $null,
        # it identified a real finding that we must process.
        If ($null -NE $finding.AffectedObjects) {
            # Increment total count of findings
            $findings_count += 1
            
            # Keep an HTML variable representing the current finding as HTML
            $short_finding_html = $templates.FindingShortTemplate
            $long_finding_html = $templates.FindingLongTemplate
            
            # Insert finding name and number into template HTML
            $short_finding_html = $short_finding_html.Replace("{{FINDING_NAME}}", $finding.FindingName)
            $short_finding_html = $short_finding_html.Replace("{{FINDING_NUMBER}}", $findings_count.ToString())
            $long_finding_html = $long_finding_html.Replace("{{FINDING_NAME}}", $finding.FindingName)
            $long_finding_html = $long_finding_html.Replace("{{FINDING_NUMBER}}", $findings_count.ToString())
            
            # Finding Impact
            If ($finding.Impact -eq 'Critical') {
                $criticalCount += 1
                $htmlImpact = '<span style="color:Crimson;"><strong>Critical</strong></span>'
                $short_finding_html = $short_finding_html.Replace("{{IMPACT}}", $htmlImpact)
                $long_finding_html = $long_finding_html.Replace("{{IMPACT}}", $htmlImpact)
            }
            ElseIf ($finding.Impact -eq 'High') {
                $highCount += 1
                $htmlImpact = '<span style="color:DarkOrange;"><strong>High</strong></span>'
                $short_finding_html = $short_finding_html.Replace("{{IMPACT}}", $htmlImpact)
                $long_finding_html = $long_finding_html.Replace("{{IMPACT}}", $htmlImpact)
            }
            Else {
                $short_finding_html = $short_finding_html.Replace("{{IMPACT}}", $finding.Impact)
                $long_finding_html = $long_finding_html.Replace("{{IMPACT}}", $finding.Impact)
            }
            
            If ($finding.Impact -eq 'Medium') {
                $mediumCount += 1
            }
            If ($finding.Impact -eq 'Low') {
                $lowCount += 1
            }
            If ($finding.Impact -eq 'Informational') {
                $informationalCount += 1
            }

            Foreach ($service in $finding.Service) {
                if ($service -match 'Exchange') { $exchangeCount += 1 }
                elseif ($service -match 'SharePoint') { $sharepointCount += 1 }
                elseif ($service -match 'Teams') { $teamsCount += 1 }
                elseif ($service -match 'Intune') { $intuneCount += 1 }
                elseif ($service -match 'AzureAD') { $aadCount += 1 }
                elseif ($service -match 'SecurityandCompliance') { $securitycomplianceCount += 1 }
                elseif ($service -eq 'Tenant') { $tenantCount += 1 }
            }

            $short_finding_html = $short_finding_html.Replace("{{RISKRATING}}", $finding.RiskRating)
            $long_finding_html = $long_finding_html.Replace("{{RISKRATING}}", $finding.RiskRating)
            
            # Finding description
            $long_finding_html = $long_finding_html.Replace("{{DESCRIPTION}}", $finding.Description)
    
            # Finding default value
            $long_finding_html = $long_finding_html.Replace("{{DEFAULTVALUE}}", $finding.DefaultValue)
    
            # Finding expected value
            $long_finding_html = $long_finding_html.Replace("{{EXPECTEDVALUE}}", $finding.ExpectedValue)
            
            # Finding Remediation
            If ($finding.Remediation.length -GT 300) {
                $short_finding_text = "Complete remediation advice is provided in the body of the report. Clicking the link to the left will take you there."
            }
            Else {
                $short_finding_text = $finding.Remediation
            }
            
            $short_finding_html = $short_finding_html.Replace("{{REMEDIATION}}", $short_finding_text)
            $long_finding_html = $long_finding_html.Replace("{{REMEDIATION}}", $finding.Remediation)
            
            # Affected Objects
            If ($finding.AffectedObjects.Count -GT 25) {
                $condensed = "<a href='{name}'>{count} Affected Objects Identified<a/>."
                $condensed = $condensed.Replace("{count}", $finding.AffectedObjects.Count.ToString())
                $condensed = $condensed.Replace("{name}", "$($finding.FindingName).txt")
                $affected_object_html = $templates.AffectedObjectsTemplate.Replace("{{AFFECTED_OBJECT}}", $condensed)
                $fname = $finding.FindingName
                $finding.AffectedObjects | Out-File -FilePath "$out_path\$fname.txt"
            }
            Else {
                $affected_object_html = ''
                ForEach ($affected_object in $finding.AffectedObjects) {
                    $affected_object_html += $templates.AffectedObjectsTemplate.Replace("{{AFFECTED_OBJECT}}", $affected_object)
                }
            }
            
            $long_finding_html = $long_finding_html.Replace($templates.AffectedObjectsTemplate, $affected_object_html)
            
            # Finding PowerShell example
            $long_finding_html = $long_finding_html.Replace("{{POWERSHELL}}", $finding.PowerShell)

            # References
            $reference_html = ''
            ForEach ($reference in $finding.References) {
                $this_reference = $templates.ReferencesTemplate.Replace("{{REFERENCE_URL}}", $reference.Url)
                $this_reference = $this_reference.Replace("{{REFERENCE_TEXT}}", $reference.Text)
                $reference_html += $this_reference
            }
            
            $long_finding_html = $long_finding_html.Replace($templates.ReferencesTemplate, $reference_html)
            
            # Add the completed short and long findings to the running list of findings (in HTML)
            $short_findings_html += $short_finding_html
            $long_findings_html += $long_finding_html
        }
    }
    
    # Insert command line execution information. This is coupled kinda badly, as is the Affected Objects html.
    $flags = "<b>Prepared for organization:</b><b> $tenantDisplayName - $org_name</b><br/><br/>"
    #$flags = $flags + "<b>Stats</b>:<br/> <b>" + $findings_count + "</b> out of <b>" + $inspectors.Count + "</b> executed inspector modules identified possible opportunities for improvement.<br/><br/>"  
    $flags = $flags + "<b>Stats</b>:<br/> <b>" + $findings_count + "</b> opportunities for improvement identified from <b>" + $inspectors.Count + "</b> points of inspection.<br/><br/>"
    #$flags = $flags + "<b>Inspector Modules Executed</b>:<br/>" + [String]::Join("<br/>", $selected_inspectors)
    
    # Add Risk Count for Charts
    $chart_template_html = $templates.ChartTemplate
    $chart_template_html = $chart_template_html.Replace("{{TOTAL_COUNT}}", $findings_count)
    $chart_template_html = $chart_template_html.Replace("{{CRITICAL_COUNT}}", $criticalCount<#.ToString()#>)
    $chart_template_html = $chart_template_html.Replace("{{HIGH_COUNT}}", $highCount<#.ToString()#>)
    $chart_template_html = $chart_template_html.Replace("{{MEDIUM_COUNT}}", $mediumCount<#.ToString()#>)
    $chart_template_html = $chart_template_html.Replace("{{LOW_COUNT}}", $lowCount<#.ToString()#>)
    $chart_template_html = $chart_template_html.Replace("{{INFORMATIONAL_COUNT}}", $informationalCount<#.ToString()#>)
    $chart_template_html = $chart_template_html.Replace("{{EXCHANGE}}", $exchangeCount.ToString())
    $chart_template_html = $chart_template_html.Replace("{{SHAREPOINT}}", $sharepointCount.ToString())
    $chart_template_html = $chart_template_html.Replace("{{TEAMS}}", $teamsCount.ToString())
    $chart_template_html = $chart_template_html.Replace("{{INTUNE}}", $intuneCount.ToString())
    $chart_template_html = $chart_template_html.Replace("{{AAD}}", $aadCount.ToString())
    $chart_template_html = $chart_template_html.Replace("{{SECCOMP}}", $securitycomplianceCount.ToString())
    $chart_template_html = $chart_template_html.Replace("{{TENANT}}", $tenantCount.ToString())

    # Add Appendix of Inspectors run
    $appendix_template_html = $templates.AppendixTemplate
    foreach ($selInspector in $selected_inspectors) {
        $selected_inspectors_html += "$selInspector,"
    }
    $appendix_template_html = $appendix_template_html.Replace("{{SELECTED_INSPECTORS}}", $selected_inspectors_html)


    $output = $templates.ReportTemplate.Replace($templates.FindingShortTemplate, $short_findings_html)
    $output = $output.Replace($templates.FindingLongTemplate, $long_findings_html)
    $output = $output.Replace($templates.ChartTemplate, $chart_template_html)
    $output = $output.Replace($templates.AppendixTemplate, $appendix_template_html)
    $output = $output.Replace($templates.ExecsumTemplate, $templates.ExecsumTemplate.Replace("{{CMDLINEFLAGS}}", $flags))
    
    $output | Out-File -FilePath $out_path\Report_$(Get-Date -Format "yyyy-MM-dd_hh-mm-ss").html
}

Function CSV-Report {
    $sortedFindings = $findings | Sort-Object { Switch -Regex ($_.Impact) { 'Critical' { 1 }	'High' { 2 }	'Medium' { 3 }	'Low' { 4 }	'Informational' { 5 } }; $_.FindingName }

    $results = @()

    $findings_count = 0

    foreach ($finding in $sortedFindings) {
        If ($null -NE $finding.AffectedObjects) {
            $findings_count += 1

            $refs = @()

            foreach ($ref in $finding.References) {
                $refs += "$($ref.Text) : $($ref.Url)"
            }

            $result = [PSCustomObject]@{
                ID                   = $findings_count.ToString()
                FindingName          = $finding.FindingName
                AffectedObjects      = $("$($finding.AffectedObjects)" | Out-String).Trim()
                Finding              = $(($finding.Description) -join " ")
                DefaultValue         = $(($finding.DefaultValue) -join " ")
                ExpectedValue        = $(($finding.ExpectedValue) -join " ")
                InherentRisk         = $finding.Impact
                'Residual Risk'      = " "
                Remediation          = $(($finding.Remediation) -join " ")
                References           = $(($refs) -join ';') 
                'Remediation Status' = " "
                'Required Resources' = " "
                'Start Date'         = " "
                'Completion Date'    = " "
                'Notes'              = " "
            }
            
            $results += $result
        }
    }

    $results | Export-Csv "$out_path\Report_$(Get-Date -Format "yyyy-MM-dd_hh-mm-ss").csv" -Delimiter '^' -NoTypeInformation -Append -Force

}

Function XML-Report {
    $sortedFindings = $findings | Sort-Object { Switch -Regex ($_.Impact) { 'Critical' { 1 }	'High' { 2 }	'Medium' { 3 }	'Low' { 4 }	'Informational' { 5 } }; $_.FindingName }

    $results = @()

    $findings_count = 0

    foreach ($finding in $sortedFindings) {
        If ($null -NE $finding.AffectedObjects) {
            $findings_count += 1

            $refs = @()

            foreach ($ref in $finding.References) {
                $refs += "$($ref.Text) : $($ref.Url)"
            }

            $result = [PSCustomObject]@{
                ID              = $findings_count.ToString()
                FindingName     = $finding.FindingName
                AffectedObjects = $("$($finding.AffectedObjects)" | Out-String).Trim()
                Finding         = $finding.Description
                DefaultValue    = $finding.DefaultValue
                ExpectedValue   = $finding.ExpectedValue
                InherentRisk    = $finding.Impact
                'Residual Risk' = " "
                Remediation     = $finding.Remediation
                References      = $($refs | Out-String) 
            }
            
            $results += $result
        }
    }

    $results | Export-Clixml -Depth 3 -Path "$out_path\Report_$(Get-Date -Format "yyyy-MM-dd_hh-mm-ss").xml"
}

Function JSON-Report {
    $sortedFindings = $findings | Sort-Object { Switch -Regex ($_.Impact) { 'Critical' { 1 }	'High' { 2 }	'Medium' { 3 }	'Low' { 4 }	'Informational' { 5 } }; $_.FindingName }

    $results = @()

    $findings_count = 0

    foreach ($finding in $sortedFindings) {
        If ($null -NE $finding.AffectedObjects) {
            $findings_count += 1

            $refs = @()

            foreach ($ref in $finding.References) {
                $refs += "$($ref.Text) : $($ref.Url)"
            }

            $result = [PSCustomObject]@{
                ID              = $findings_count.ToString()
                FindingName     = $finding.FindingName
                AffectedObjects = $("$($finding.AffectedObjects)" | Out-String).Trim()
                Finding         = $finding.Description
                DefaultValue    = $finding.DefaultValue
                ExpectedValue   = $finding.ExpectedValue
                InherentRisk    = $finding.Impact
                'Residual Risk' = " "
                Remediation     = $finding.Remediation
                References      = $($refs | Out-String) 
            }
            
            $results += $result
        }
    }

    $results | ConvertTo-Json | Out-File -FilePath $out_path\Report_$(Get-Date -Format "yyyy-MM-dd_hh-mm-ss").json
}

Function All-Report {
    CSV-Report
    XML-Report
    JSON-Report
    HTML-Report
}

If ($reportType -eq "HTML") {
    HTML-Report
}
Elseif ($reportType -eq "CSV") {
    CSV-Report
}
Elseif ($reportType -eq "XML") {
    XML-Report
}
Elseif ($reportType -eq "JSON") {
    JSON-Report
}
Else {
    All-Report
}

$compress = @{
    Path             = $out_path
    CompressionLevel = "Fastest"
    DestinationPath  = "$out_path\$($org_name)_Report.zip"
}
Compress-Archive @compress

function Disconnect {
    Write-Output "Disconnect from Exchange Online"
    Disconnect-ExchangeOnline -Confirm:$false
    Write-Output "Disconnect from SharePoint Service"
    Disconnect-SPOService
    Write-Output "Disconnect from Microsoft Teams"
    Disconnect-MicrosoftTeams
    Write-Output "Disconnect from Microsoft Intune"
    Write-Output "Disconnect from Microsoft Graph"
    Disconnect-MgGraph
}

$removeSession = Read-Host -Prompt "Do you wish to disconnect your session? (Y|N)"

If ($removeSession -ne 'n') {
    Disconnect
}


return